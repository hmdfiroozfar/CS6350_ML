# -*- coding: utf-8 -*-
"""Bagged_trees_bias_var.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AK27C-bBQJVFu44dAKbeCNCcwSVrpjNE
"""

import pandas as pd
import numpy as np
from numpy import log2, log, sqrt
import matplotlib.pyplot as plt
import random
from random import sample
from Adaboost import *

num_bags = 100
num_trees = 100
num_samples = 1000

COLUMN_NAMES = ['age', 'job', 'marital', 'education', 'default', 'balance', 'housing', 'loan',
                'contact', 'day', 'month', 'duration', 'campaign', 'pdays', 'previous', 'poutcome', 'y']
COLUMN_TYPES = ['numeric', 'categorical', 'categorical', 'categorical', 'binary', 'numeric',
                'binary', 'binary', 'categorical', 'numeric', 'categorical', 'numeric',
                'numeric', 'numeric', 'numeric', 'categorical', 'binary']
COLUMN_TYPE_MAPPING = dict(zip(COLUMN_NAMES, COLUMN_TYPES))

train_data = pd.read_csv('Data/Bank/train.csv', names = COLUMN_NAMES)
test_data = pd.read_csv('Data/Bank/test.csv', names = COLUMN_NAMES)

median_values = {}
binary_train_data = pd.DataFrame()
binary_test_data = pd.DataFrame()

for column in COLUMN_NAMES:
    if COLUMN_TYPE_MAPPING[column] == 'numeric':
        median_value = train_data[column].median()
        median_values[column] = median_value
        binary_train_data[column + '>' + str(median_value)] = np.where(train_data[column] > median_value, 'yes', 'no')
        binary_test_data[column + '>' + str(median_value)] = np.where(test_data[column] > median_value, 'yes', 'no')
    else:
        binary_train_data[column] = train_data[column]
        binary_test_data[column] = test_data[column]

train_features = [list(binary_train_data.loc[i])[:-1] for i in range(len(binary_train_data))]
train_labels = [1 if label == 'yes' else -1 for label in list(binary_train_data['y'])]

test_features = [list(binary_test_data.loc[i])[:-1] for i in range(len(binary_test_data))]
test_labels = [1 if label == 'yes' else -1 for label in list(binary_test_data['y'])]



model_histories = []
attribute_indices = list(range(0, len(COLUMN_NAMES)-1))

for bag in range(num_bags):
    bag_history = []
    sampled_indices = sample(range(len(train_features)), 1000)
    sampled_train_features = [train_features[i] for i in sampled_indices]
    sampled_train_labels = [train_labels[i] for i in sampled_indices]
    for _ in range(num_trees):
        tree_model = DecisionTree(sampled_train_features, sampled_train_labels, attribute_indices, depth=-1, feature_sample_size=3)
        bag_history.append(tree_model)
    model_histories.append(bag_history)

def compute_single_bias_variance(data_point, label, forest):
    predictions = [model.predict(data_point) for model in forest]
    mean_prediction = np.mean(predictions)
    bias = (label - mean_prediction) ** 2
    variance = np.var(predictions)
    return bias, variance

forest = [model_histories[i][0] for i in range(num_bags)]
biases = [compute_single_bias_variance(test_features[i], test_labels[i], forest)[0] for i in range(len(test_features))]
variances = [compute_single_bias_variance(test_features[i], test_labels[i], forest)[1] for i in range(len(test_features))]
mean_bias = np.mean(biases)
mean_variance = np.mean(variances)

print(f"Single Tree: Bias = {mean_bias}, Variance= {mean_variance}, Squared error = {mean_bias + mean_variance}")

def bagging_prediction(single_data_point, bag_of_models):

    cumulative_prediction = 0
    for model in bag_of_models:
        cumulative_prediction += model.predict(single_data_point)

    return 1 if cumulative_prediction >= 0 else -1


def compute_bias_and_variance(single_data_point, true_label, list_of_bags):

    number_of_bags = len(list_of_bags)
    aggregated_predictions = np.zeros(number_of_bags)

    for i in range(number_of_bags):
        bag_of_models = list_of_bags[i]
        aggregated_predictions[i] = bagging_prediction(single_data_point, bag_of_models)

    bias_squared = (true_label - aggregated_predictions.mean()) ** 2
    variance = aggregated_predictions.var()

    return bias_squared, variance


average_bias_squared = np.array(
    [compute_bias_and_variance(test_features[i], test_labels[i], model_histories)[0]
     for i in range(len(test_features))]).mean()

average_variance = np.array(
    [compute_bias_and_variance(test_features[i], test_labels[i], model_histories)[1]
     for i in range(len(test_features))]).mean()


print(f'Bagged Trees: Bias= {average_bias_squared}, Variance = {average_variance}, Squared Error = {average_bias_squared + average_variance}')